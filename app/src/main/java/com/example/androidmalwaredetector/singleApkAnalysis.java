package com.example.androidmalwaredetector;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.util.Log;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.androidmalwaredetector.utilities.ManifestParser;
import com.example.androidmalwaredetector.utilities.Utils;
import com.example.androidmalwaredetector.utilities.classifier;

import net.dongliu.apk.parser.ApkFile;
import net.dongliu.apk.parser.bean.ApkMeta;
import net.dongliu.apk.parser.bean.UseFeature;

import java.io.File;
import java.io.IOException;
import java.util.List;

import de.hdodenhof.circleimageview.CircleImageView;

public class singleApkAnalysis extends AppCompatActivity {

    int malProb;
    String location;
    String mlAlgo;
    String TAG = "SingleAPK";
    ImageView iconImg;
    TextView permissionsView, featuresView, actionView, serviceView, receiverView, appName, pkgName, isMalware;
    CircleImageView malIndicator;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_single_apk_analysis);
        location = getIntent().getStringExtra("apkLocation");
        mlAlgo = getIntent().getStringExtra("mlAlgo");

        malIndicator = findViewById(R.id.S_circleIndi);
        iconImg = findViewById(R.id.S_icon);
        permissionsView = findViewById(R.id.S_permissions);
        actionView = findViewById(R.id.S_action);
        serviceView = findViewById(R.id.S_service);
        receiverView = findViewById(R.id.S_receiver);
        featuresView = findViewById(R.id.S_features);
        isMalware = findViewById(R.id.S_malwareProb);
        appName = findViewById(R.id.S_appName);
        pkgName = findViewById(R.id.S_pkgName);

        appName.setTextSize(20);

        Long start = System.currentTimeMillis();
        String manifest = Utils.getManifest(location);
        ManifestParser manifestParser = new ManifestParser(manifest, 0);
        List<Integer> inputArray = manifestParser.getInputArray();
        classifier c = new classifier();
        malProb = 100 - c.classify(inputArray, mlAlgo,this);
        Long end = System.currentTimeMillis();
        long elapsedTime = end - start;
        isMalware.setText("Malware Probability: ." + malProb);
        iconImg.setImageDrawable(getIcon(location, this));


        if(malProb <= 50){
            malIndicator.setImageResource(R.color.safe);
        }
        else if(malProb <= 75){
            malIndicator.setImageResource(R.color.suspicious);
        }
        else{
            malIndicator.setImageResource(R.color.danger);
        }



        try (ApkFile apkFile = new ApkFile(new File(location))) {
            ApkMeta apkMeta = apkFile.getApkMeta();
            pkgName.setText(apkMeta.getPackageName());
            appName.setText(apkMeta.getName());
            Toast.makeText(this, apkMeta.getPackageName(), Toast.LENGTH_SHORT).show();
            for (UseFeature feature : apkMeta.getUsesFeatures()) {
                Log.d(TAG, feature.getName());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        permissionsView.setText(manifestParser.getPermissionSet());
        serviceView.setText(manifestParser.getServiceSet());
        actionView.setText(manifestParser.getActionSet());
        featuresView.setText(manifestParser.getFeatureSet());
        receiverView.setText(manifestParser.getReceiverSet());

    }

    static Drawable getIcon(String location, Context context){
        PackageManager pm = context.getApplicationContext().getPackageManager();
        PackageInfo pi = pm.getPackageArchiveInfo(location, 0);
        pi.applicationInfo.sourceDir       = location;
        pi.applicationInfo.publicSourceDir = location;
        return pi.applicationInfo.loadIcon(pm);
    }
}