package com.example.androidmalwaredetector.utilities;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

public class InstalledAppInfo {

    public static boolean mSystemApp = true;
    public static CharSequence mApplicationName;
    public static Drawable mApplicationIcon;
    public static List<String> mBatchList = new ArrayList<>();
    public static String mApplicationID;
    public static String mDirData;
    public static String mDirNatLib;
    public static String mDirSource;
    public static String mPath;
    public static String mSearchText;

    public static List<String> getInstalledPackages(Context context){
        boolean mAppType;
        List<String> mData = new ArrayList<>();

        List<android.content.pm.ApplicationInfo> packages = getPackageManager(context).getInstalledApplications(PackageManager.GET_META_DATA);
        if (Utils.getBoolean("sort_name", true, context)) {
            Collections.sort(packages, new android.content.pm.ApplicationInfo.DisplayNameComparator(getPackageManager(context)));
        }
        for (android.content.pm.ApplicationInfo packageInfo: packages) {
            if (Utils.getString("appTypes", "all", context).equals("system")) {
                mAppType = (packageInfo.flags & android.content.pm.ApplicationInfo.FLAG_SYSTEM) != 0;
            } else if (Utils.getString("appTypes", "all", context).equals("user")) {
                mAppType = (packageInfo.flags & android.content.pm.ApplicationInfo.FLAG_SYSTEM) == 0;
            } else {
                mAppType = true;
            }
           if( mAppType && packageInfo.packageName.contains(".") && !isSystemApp(packageInfo.packageName, context)) {

                if (mSearchText == null ) {
                    mData.add(packageInfo.packageName);
                } else if (getPackageManager(context).getApplicationLabel(packageInfo).toString().toLowerCase().contains(mSearchText.toLowerCase())
                        || packageInfo.packageName.toLowerCase().contains(mSearchText.toLowerCase())) {
                    mData.add(packageInfo.packageName);
                }
            }
      }
        if (Utils.getBoolean("reverse_order", false, context)) {
            Collections.reverse(mData);
        }
        return mData;
    }

    public static PackageManager getPackageManager(Context context) {
        return context.getApplicationContext().getPackageManager();
    }

    public static String getAppName(String packageName, Context context) {
        return getPackageManager(context).getApplicationLabel(Objects.requireNonNull(getAppInfo(
                packageName, context))) + (isEnabled(packageName, context) ? "" : " (Disabled)");
    }

    public static boolean isEnabled(String packageName, Context context) {
        return Objects.requireNonNull(getAppInfo(packageName, context)).enabled;
    }

    public static android.content.pm.ApplicationInfo getAppInfo(String packageName, Context context) {
        try {
            return getPackageManager(context).getApplicationInfo(packageName, PackageManager.GET_META_DATA);
        } catch (Exception ignored) {
        }
        return null;
    }

    public static boolean isSystemApp(String packageName, Context context) {
        return (Objects.requireNonNull(getAppInfo(packageName, context)).flags & android.content.pm.ApplicationInfo.FLAG_SYSTEM) != 0;
    }

    public static String getSourceDir(String packageName, Context context) {
        return Objects.requireNonNull(getAppInfo(packageName, context)).sourceDir;
    }

    public static String getAPKSize(String path) {
        long size = new File(path).length() / 1024;
        long decimal = (size - 1024) / 1024;
        if (size > 1024) {
            return size / 1024 + "." + decimal + " MB";
        } else {
            return size  + " KB";
        }
    }
}
