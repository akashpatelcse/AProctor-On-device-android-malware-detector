package com.example.androidmalwaredetector;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.androidmalwaredetector.utilities.InstalledAppInfo;
import com.example.androidmalwaredetector.utilities.ManifestParser;
import com.example.androidmalwaredetector.utilities.Utils;
import com.example.androidmalwaredetector.utilities.apkDetails;
import com.example.androidmalwaredetector.utilities.classifier;
import com.example.androidmalwaredetector.utilities.features;
import com.example.androidmalwaredetector.utilities.universalParser;

import net.dongliu.apk.parser.ApkFile;
import net.dongliu.apk.parser.bean.ApkMeta;

import java.io.File;
import java.io.IOException;
import java.util.List;

import de.hdodenhof.circleimageview.CircleImageView;

public class SingleAPKAnalysis2 extends AppCompatActivity {
    int malProb;
    String location;
    String mlAlgo;
    String TAG = "SingleAPK";
    ImageView iconImg;
    TextView permissionsView, featuresView, actionView, serviceView, receiverView, appName, pkgName, isMalware;
    CircleImageView malIndicator;
    private ProgressDialog pDialog;
    Context context;

    public static final int progress_bar_type = 0;

    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_single_apk_analysis);
        location = getIntent().getStringExtra("apkLocation");
        mlAlgo = getIntent().getStringExtra("mlAlgo");
        context = this;

        AsyncTaskRunner runner = new AsyncTaskRunner();
        runner.execute("");

    }


    private class AsyncTaskRunner extends AsyncTask<String, String, String> {

        private String resp;
        ProgressDialog progressDialog;
        int total, count;
        long elapsedTime;


        @Override
        protected String doInBackground(String... params) {
            count = 0;
            malIndicator = findViewById(R.id.S_circleIndi);
            iconImg = findViewById(R.id.S_icon);
            permissionsView = findViewById(R.id.S_permissions);
            actionView = findViewById(R.id.S_action);
            serviceView = findViewById(R.id.S_service);
            receiverView = findViewById(R.id.S_receiver);
            featuresView = findViewById(R.id.S_features);
            isMalware = findViewById(R.id.S_malwareProb);
            appName = findViewById(R.id.S_appName);
            pkgName = findViewById(R.id.S_pkgName);

            appName.setTextSize(20);
            count = 10;
            Long start = System.currentTimeMillis();
            String manifest = Utils.getManifest(location);
            ManifestParser manifestParser = new ManifestParser(manifest, 0);

            List<String> apiCalls = universalParser.getApiCalls(location);
            Log.d("SingleAPKAnalysis", String.valueOf(apiCalls));
            features f = new features();
            for(String i : apiCalls)
                f.add(i);
            List<Integer> inputArray = f.getPermList();

            Log.d("SingleAPKAnalysis", String.valueOf(inputArray));
            classifier c = new classifier();
            malProb = 100 - c.classify(inputArray, mlAlgo,context);
            Long end = System.currentTimeMillis();
            long elapsedTime = end - start;
            isMalware.setText("Malware Probability: " + malProb + "/100");
            iconImg.setImageDrawable(getIcon(location, context));
            count = 20;

            if(malProb <= 50){
                malIndicator.setImageResource(R.color.safe);
            }
            else if(malProb <= 75){
                malIndicator.setImageResource(R.color.suspicious);
            }
            else{
                malIndicator.setImageResource(R.color.danger);
            }

            try (ApkFile apkFile = new ApkFile(new File(location))) {
                ApkMeta apkMeta = apkFile.getApkMeta();
                pkgName.setText(apkMeta.getPackageName());
                appName.setText(apkMeta.getName());
            } catch (IOException e) {
                e.printStackTrace();
            }
            permissionsView.setText(manifestParser.getPermissionSet());
            serviceView.setText(manifestParser.getServiceSet());
            actionView.setText(manifestParser.getActionSet());
            featuresView.setText(manifestParser.getFeatureSet());
            receiverView.setText(manifestParser.getReceiverSet());
            count = 100;
            return "";
        }



        @Override
        protected void onPostExecute(String result) {
            dismissDialog(progress_bar_type);

        }


        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            showDialog(progress_bar_type);

        }


        @Override
        protected void onProgressUpdate(String... text) {
            pDialog.setProgress(count);
        }
    }

    static Drawable getIcon(String location, Context context){
        PackageManager pm = context.getApplicationContext().getPackageManager();
        PackageInfo pi = pm.getPackageArchiveInfo(location, 0);
        pi.applicationInfo.sourceDir       = location;
        pi.applicationInfo.publicSourceDir = location;
        return pi.applicationInfo.loadIcon(pm);
    }



}
